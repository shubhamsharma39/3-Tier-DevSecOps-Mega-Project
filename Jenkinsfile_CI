pipeline {
    agent any
    
    tools{
        nodejs 'nodejs23'
    }
    
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('git Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/shubhamsharma39/3-Tier-DevSecOps-Mega-Project.git'
            }
        }
        
        stage('fronted compilation') {
            steps {
                dir('client') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('backend compilation') {
            steps {
                dir('api') {
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('Gitleaks Scan') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS.Peoject \
                           -Dsonar.projectKey=NodeJS-Project '''
                }
            }
        }
        
        stage('Quality Gate Check') {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }
        stage('Trivy FS Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        
         stage('Build-Tag & Push Backend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
                            sh 'docker build -t shubham0039sharma/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html shubham0039sharma/backend:latest '
                            sh 'docker push shubham0039sharma/backend:latest'
                           
                        }
                    }
                }
            }
        }  
            
        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
                            sh 'docker build -t shubham0039sharma/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html shubham0039sharma/frontend:latest '
                            sh 'docker push shubham0039sharma/frontend:latest'
                        }
                    }
                }
            }
             
        } 
        
        stage('K8-deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://B89C21E1B66F69799CD9EAE49DDF51AB.sk1.ap-south-1.eks.amazonaws.com') {
                        sh 'kubectl apply -f k8s-prod/sc.yaml -n dev'
                        sh 'kubectl apply -f k8s-prod/mysql.yaml -n dev'
                        sh 'kubectl apply -f k8s-prod/backend.yaml -n dev'
                        sh 'kubectl apply -f k8s-prod/frontend.yaml -n dev'
                        sleep 30
                    }
                }
            }
        }
        
        stage('verify-K8-deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://B89C21E1B66F69799CD9EAE49DDF51AB.sk1.ap-south-1.eks.amazonaws.com') {
                        sh 'kubectl get pods -n dev'
                        sh 'kubectl get svc -n dev'
                    }
                }
            }
        }
    }
}
